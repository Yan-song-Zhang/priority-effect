state = invader_state2,
times = seq(0, 50, 0.1),
mode = "substitu"
)
final2 <- tail(invasion2, 1)
# Return results
tibble(
param_set = i,
# Invasion 1: N2 invading N1 resident
N1_final_1 = final$N1,
N2_final_1 = final$N2,
invasion_success_1 = final$N2 > 0.01,  # Invasion threshold
# Invasion 2: N1 invading N2 resident
N1_final_2 = final2$N1,
N2_final_2 = final2$N2,
invasion_success_2 = final2$N1 > 0.01,
# Priority effect classification
priority_effect = !invasion_success_1 & !invasion_success_2
)
})
# 4. Analyze results
priority_effect_summary <- results %>%
group_by(priority_effect) %>%
summarise(count = n(), percentage = n()/n_sets * 100)
priority_effect_summary
# 2. Generate parameter sets
n_sets <- 1000  # Number of parameter sets
param_df <- tibble(
c11 = runif(n_sets, 0.1, 1),
c12 = runif(n_sets, 0.1, 1),
w11 = runif(n_sets, 0.1, 1),
w12 = runif(n_sets, 0.1, 1),
#m1 = runif(n_sets, 0.01, 0.1),  # Species 1 mortality
c21 = runif(n_sets, 0.1, 1),
c22 = runif(n_sets, 0.1, 1),
w21 = runif(n_sets, 0.1, 1),
w22 = runif(n_sets, 0.1, 1),
#m2 = runif(n_sets, 0.01, 0.1),  # Species 2 mortality
#sigma = runif(n_sets, 0.1, 0.5) # Noise magnitude
sigma = 0
)
# Add fixed parameters
param_df <- param_df %>% mutate(
D = 0.1,
R1_in = 10,
R2_in = 10,
param_set = row_number(),
# sigma = 0
)
# 3. Mutual invasion simulation
results <- map_dfr(1:nrow(param_df), function(i) {
params <- as.list(param_df[i, ])
# Phase 1: Establish resident (N1)
resident <- simulate_chemostat(
params,
state = c(R1 = 10, R2 = 10, N1 = 0.1, N2 = 0),
times = seq(0, 100, 0.1),
mode = "substitu"
)
# Get equilibrium state
eq_state <- tail(resident, 1) %>% select(R1, R2, N1, N2) %>% unlist()
# Phase 2: Invasion with noise (N2 invades)
invader_state <- eq_state
invader_state["N2"] <- 0.01  # Introduce invader
invasion <- simulate_chemostat(
params,
state = invader_state,
times = seq(0, 50, 0.1),
mode = "substitu"
)
# Get final state
final <- tail(invasion, 1)
# Phase 3: Reverse invasion (N1 invades N2)
# First establish N2 resident
resident2 <- simulate_chemostat(
params,
state = c(R1 = 10, R2 = 10, N1 = 0, N2 = 0.1),
times = seq(0, 100, 0.1),
mode = "substitu"
)
eq_state2 <- tail(resident2, 1) %>% select(R1, R2, N1, N2) %>% unlist()
# N1 invasion
invader_state2 <- eq_state2
invader_state2["N1"] <- 0.01
invasion2 <- simulate_chemostat(
params,
state = invader_state2,
times = seq(0, 50, 0.1),
mode = "substitu"
)
final2 <- tail(invasion2, 1)
# Return results
tibble(
param_set = i,
# Invasion 1: N2 invading N1 resident
N1_final_1 = final$N1,
N2_final_1 = final$N2,
invasion_success_1 = final$N2 > 0.01,  # Invasion threshold
# Invasion 2: N1 invading N2 resident
N1_final_2 = final2$N1,
N2_final_2 = final2$N2,
invasion_success_2 = final2$N1 > 0.01,
# Priority effect classification
priority_effect = !invasion_success_1 & !invasion_success_2
)
})
# 4. Analyze results
priority_effect_summary <- results %>%
group_by(priority_effect) %>%
summarise(count = n(), percentage = n()/n_sets * 100)
priority_effect_summary
# 2. Generate parameter sets
n_sets <- 1000  # Number of parameter sets
param_df <- tibble(
c11 = runif(n_sets, 0.1, 1),
c12 = runif(n_sets, 0.1, 1),
w11 = runif(n_sets, 0.1, 1),
w12 = runif(n_sets, 0.1, 1),
#m1 = runif(n_sets, 0.01, 0.1),  # Species 1 mortality
c21 = runif(n_sets, 0.1, 1),
c22 = runif(n_sets, 0.1, 1),
w21 = runif(n_sets, 0.1, 1),
w22 = runif(n_sets, 0.1, 1),
#m2 = runif(n_sets, 0.01, 0.1),  # Species 2 mortality
#sigma = runif(n_sets, 0.1, 0.5) # Noise magnitude
sigma = 0
)
# Add fixed parameters
param_df <- param_df %>% mutate(
D = 0.1,
R1_in = 10,
R2_in = 10,
param_set = row_number(),
# sigma = 0
)
# 3. Mutual invasion simulation
results <- map_dfr(1:nrow(param_df), function(i) {
params <- as.list(param_df[i, ])
# Phase 1: Establish resident (N1)
resident <- simulate_chemostat(
params,
state = c(R1 = 10, R2 = 10, N1 = 0.1, N2 = 0),
times = seq(0, 100, 0.1),
mode = "substitu"
)
# Get equilibrium state
eq_state <- tail(resident, 1) %>% select(R1, R2, N1, N2) %>% unlist()
# Phase 2: Invasion with noise (N2 invades)
invader_state <- eq_state
invader_state["N2"] <- 0.01  # Introduce invader
invasion <- simulate_chemostat(
params,
state = invader_state,
times = seq(0, 50, 0.1),
mode = "substitu"
)
# Get final state
final <- tail(invasion, 1)
# Phase 3: Reverse invasion (N1 invades N2)
# First establish N2 resident
resident2 <- simulate_chemostat(
params,
state = c(R1 = 10, R2 = 10, N1 = 0, N2 = 0.1),
times = seq(0, 100, 0.1),
mode = "substitu"
)
eq_state2 <- tail(resident2, 1) %>% select(R1, R2, N1, N2) %>% unlist()
# N1 invasion
invader_state2 <- eq_state2
invader_state2["N1"] <- 0.01
invasion2 <- simulate_chemostat(
params,
state = invader_state2,
times = seq(0, 50, 0.1),
mode = "substitu"
)
final2 <- tail(invasion2, 1)
# Return results
tibble(
param_set = i,
# Invasion 1: N2 invading N1 resident
N1_final_1 = final$N1,
N2_final_1 = final$N2,
invasion_success_1 = final$N2 > 0.01,  # Invasion threshold
# Invasion 2: N1 invading N2 resident
N1_final_2 = final2$N1,
N2_final_2 = final2$N2,
invasion_success_2 = final2$N1 > 0.01,
# Priority effect classification
priority_effect = !invasion_success_1 & !invasion_success_2
)
})
# 4. Analyze results
priority_effect_summary <- results %>%
group_by(priority_effect) %>%
summarise(count = n(), percentage = n()/n_sets * 100)
priority_effect_summary
View(param_df)
param_df_invasion = param_df[,1:8]
View(param_df_invasion)
###1111
##N1 0.1 N2 10
fixed_params = c(D = 0.1, R1_in = 10,R2_in = 10)
times_chemo = seq(0,500,by = 0.1)
state_chemo_111 = c(R1 = 10, R2 = 10,N1 = .1, N2 = 10)
# Loop over each row in param_df_invasion[, 7:12]
results.111 <- lapply(1:nrow(param_df_invasion), function(i) {
# Combine individual and fixed parameters
params <- c(as.list(param_df_invasion[i, ]), fixed_params)
# Run the manual simulation
sim_df <- simulate_chemostat_manual_N1N2(
params = params,
state = state_chemo_111,
times = times_chemo,
mode = "substitu"  # or "essen"
)
sim_df$param_set <- i  # Track parameter set
sim_df
})
# Combine all results into one data frame
all_results_df.111 <- do.call(rbind, results.111)
all_results_df.111.equili = all_results_df.111[all_results_df.111$time==500.0,]
###222
##N1 10 N2 0.1
fixed_params = c(D = 0.1, R1_in = 10,R2_in = 10)
times_chemo = seq(0,500,by = 0.1)
state_chemo_222 = c(R1 = 10, R2 = 10,N1 = 10, N2 = .1)
# Loop over each row in param_df_invasion[, 7:12]
results.222 <- lapply(1:nrow(param_df_invasion), function(i) {
# Combine individual and fixed parameters
params <- c(as.list(param_df_invasion[i, ]), fixed_params)
# Run the manual simulation
sim_df <- simulate_chemostat_manual_N1N2(
params = params,
state = state_chemo_222,
times = times_chemo,
mode = "substitu"  # or "essen"
)
sim_df$param_set <- i  # Track parameter set
sim_df
})
# Combine all results into one data frame
all_results_df.222 <- do.call(rbind, results.222)
all_results_df.222.equili = all_results_df.222[all_results_df.222$time==500.0,]
all_results.equili = cbind(all_results_df.111.equili[,2:6],all_results_df.222.equili[2:5])
names(all_results.equili) = c("R1_2","R2_2",'N1_2','N2_2',"para_set","R1_1","R2_1",'N1_1','N2_1')
df_all_results.equili <- all_results.equili %>%
mutate(diff_N1 = abs(N1_2 - N1_1),
diff_N2 = abs(N2_2 - N2_1))            %>%
mutate(
diff_N1_per = ifelse(diff_N1 != 0, abs(N1_2 - N1_1) / (N1_2 + N1_1), 0),
diff_N2_per = ifelse(diff_N2 != 0, abs(N2_2 - N2_1) / (N2_2 + N2_1), 0)
) %>%
mutate(
results_1 = case_when(
(N1_1 > 100*N2_1) |  (N2_1 > 100*N1_1) ~ 'exclusion',
TRUE ~ 'coexsitence'),
results_2 = case_when(
(N1_2 > 100*N2_2) |  (N2_2 > 100*N1_2) ~ 'exclusion',
TRUE ~ 'coexsitence'
)
)
df_all_results.equili_new = df_all_results.equili[,c("para_set","N1_1","N1_2","diff_N1","diff_N1_per","N2_1","N2_2","diff_N2","diff_N2_per",'results_1','results_2')]
df_all_results.equili_new %>%
group_by(results_1, results_2) %>%
summarise(count = n(), .groups = 'drop')
param_df$sigma=0.1
# 3. Mutual invasion simulation
results <- map_dfr(1:nrow(param_df), function(i) {
params <- as.list(param_df[i, ])
# Phase 1: Establish resident (N1)
resident <- simulate_chemostat(
params,
state = c(R1 = 10, R2 = 10, N1 = 0.1, N2 = 0),
times = seq(0, 100, 0.1),
mode = "substitu"
)
# Get equilibrium state
eq_state <- tail(resident, 1) %>% select(R1, R2, N1, N2) %>% unlist()
# Phase 2: Invasion with noise (N2 invades)
invader_state <- eq_state
invader_state["N2"] <- 0.01  # Introduce invader
invasion <- simulate_chemostat(
params,
state = invader_state,
times = seq(0, 50, 0.1),
mode = "substitu"
)
# Get final state
final <- tail(invasion, 1)
# Phase 3: Reverse invasion (N1 invades N2)
# First establish N2 resident
resident2 <- simulate_chemostat(
params,
state = c(R1 = 10, R2 = 10, N1 = 0, N2 = 0.1),
times = seq(0, 100, 0.1),
mode = "substitu"
)
eq_state2 <- tail(resident2, 1) %>% select(R1, R2, N1, N2) %>% unlist()
# N1 invasion
invader_state2 <- eq_state2
invader_state2["N1"] <- 0.01
invasion2 <- simulate_chemostat(
params,
state = invader_state2,
times = seq(0, 50, 0.1),
mode = "substitu"
)
final2 <- tail(invasion2, 1)
# Return results
tibble(
param_set = i,
# Invasion 1: N2 invading N1 resident
N1_final_1 = final$N1,
N2_final_1 = final$N2,
invasion_success_1 = final$N2 > 0.01,  # Invasion threshold
# Invasion 2: N1 invading N2 resident
N1_final_2 = final2$N1,
N2_final_2 = final2$N2,
invasion_success_2 = final2$N1 > 0.01,
# Priority effect classification
priority_effect = !invasion_success_1 & !invasion_success_2
)
})
# 4. Analyze results
priority_effect_summary <- results %>%
group_by(priority_effect) %>%
summarise(count = n(), percentage = n()/n_sets * 100)
priority_effect_summary
df_all_results.equili <- all_results.equili %>%
mutate(diff_N1 = abs(N1_2 - N1_1),
diff_N2 = abs(N2_2 - N2_1))            %>%
mutate(
diff_N1_per = ifelse(diff_N1 != 0, abs(N1_2 - N1_1) / (N1_2 + N1_1), 0),
diff_N2_per = ifelse(diff_N2 != 0, abs(N2_2 - N2_1) / (N2_2 + N2_1), 0)
) %>%
mutate(
results_1 = case_when(
(N1_1 > 100*N2_1)  ~ 'N1 outcompete',
(N2_1 > 100*N1_1)  ~ 'N2 outcompete',
TRUE ~ 'coexsitence'),
results_2 = case_when(
(N1_2 > 100*N2_2)  ~ 'N1 outcompete',
(N2_2 > 100*N1_2)  ~ 'N2 outcompete',
TRUE ~ 'coexsitence'
)
)
df_all_results.equili_new = df_all_results.equili[,c("para_set","N1_1","N1_2","diff_N1","diff_N1_per","N2_1","N2_2","diff_N2","diff_N2_per",'results_1','results_2')]
df_all_results.equili_new %>%
group_by(results_1, results_2) %>%
summarise(count = n(), .groups = 'drop')
save.image(file = "2025.6.11.RData")
filtered_row_names <- df_all_results.equili_new %>%
filter(results_1=='N1 outcompete',results_2=='coexsitence') %>%
pull(para_set)
filtered_row_names
random_ids = c( 276, 293 ,310 ,326 ,332)
# 2. Filter both dataframes
df1_sub <- all_results_df.111 %>% filter(param_set %in% random_ids)
df2_sub <- all_results_df.222 %>% filter(param_set %in% random_ids)
df1_sub$Source <- "N2_first"
df2_sub$Source <- "N1_first"
combined_df <- dplyr::bind_rows(df1_sub, df2_sub)
long_df <- pivot_longer(
combined_df,
cols = c(N1, N2),
names_to = "Population",
values_to = "Abundance"
)
ggplot(long_df, aes(x = time, y = Abundance, color = Population)) +
geom_line() +
facet_grid(Source ~ param_set, scales = "free_y") +
labs(
title = "Dynamics of N.1 and N.2 for Random Simulations",
x = "Timestep", y = "Abundance (log scale)"
) +
theme_minimal() +
scale_y_log10() +
theme(strip.text.x = element_text(angle = 90))
filtered_row_names <- df_all_results.equili_new %>%
filter(results_1=='N1 outcompete',results_2=='coexsitence',N2_2>5) %>%
pull(para_set)
filtered_row_names
random_ids = c( 678, 698, 738, 740, 766)
# 2. Filter both dataframes
df1_sub <- all_results_df.111 %>% filter(param_set %in% random_ids)
df2_sub <- all_results_df.222 %>% filter(param_set %in% random_ids)
df1_sub$Source <- "N2_first"
df2_sub$Source <- "N1_first"
combined_df <- dplyr::bind_rows(df1_sub, df2_sub)
long_df <- pivot_longer(
combined_df,
cols = c(N1, N2),
names_to = "Population",
values_to = "Abundance"
)
ggplot(long_df, aes(x = time, y = Abundance, color = Population)) +
geom_line() +
facet_grid(Source ~ param_set, scales = "free_y") +
labs(
title = "Dynamics of N.1 and N.2 for Random Simulations",
x = "Timestep", y = "Abundance (log scale)"
) +
theme_minimal() +
scale_y_log10() +
theme(strip.text.x = element_text(angle = 90))
ggsave("temporary coexsitence(15).pdf")
filtered_row_names <- df_all_results.equili_new %>%
# filter(results_1=='N1 outcompete',results_2=='coexsitence',N2_2>5) %>%
filter(results_2=='N2 outcompete',results_1=='coexsitence',N1_1>5) %>%
pull(para_set)
filtered_row_names
random_ids = c( 577 ,715 ,809 ,811 ,815)
# 2. Filter both dataframes
df1_sub <- all_results_df.111 %>% filter(param_set %in% random_ids)
df2_sub <- all_results_df.222 %>% filter(param_set %in% random_ids)
df1_sub$Source <- "N2_first"
df2_sub$Source <- "N1_first"
combined_df <- dplyr::bind_rows(df1_sub, df2_sub)
long_df <- pivot_longer(
combined_df,
cols = c(N1, N2),
names_to = "Population",
values_to = "Abundance"
)
ggplot(long_df, aes(x = time, y = Abundance, color = Population)) +
geom_line() +
facet_grid(Source ~ param_set, scales = "free_y") +
labs(
title = "Dynamics of N.1 and N.2 for Random Simulations",
x = "Timestep", y = "Abundance (log scale)"
) +
theme_minimal() +
scale_y_log10() +
theme(strip.text.x = element_text(angle = 90))
ggsave("temporary coexsitence(12).pdf")
###1111
##N1 0.1 N2 10
fixed_params = c(D = 0.1, R1_in = 10,R2_in = 10)
times_chemo = seq(0,1000,by = 0.1)
state_chemo_111 = c(R1 = 10, R2 = 10,N1 = .1, N2 = 10)
# Loop over each row in param_df_invasion[, 7:12]
results.111 <- lapply(1:nrow(param_df_invasion), function(i) {
# Combine individual and fixed parameters
params <- c(as.list(param_df_invasion[i, ]), fixed_params)
# Run the manual simulation
sim_df <- simulate_chemostat_manual_N1N2(
params = params,
state = state_chemo_111,
times = times_chemo,
mode = "substitu"  # or "essen"
)
sim_df$param_set <- i  # Track parameter set
sim_df
})
# Combine all results into one data frame
all_results_df.111 <- do.call(rbind, results.111)
all_results_df.111.equili = all_results_df.111[all_results_df.111$time==1000.0,]
###222
##N1 10 N2 0.1
fixed_params = c(D = 0.1, R1_in = 10,R2_in = 10)
times_chemo = seq(0,1000,by = 0.1)
state_chemo_222 = c(R1 = 10, R2 = 10,N1 = 10, N2 = .1)
# Loop over each row in param_df_invasion[, 7:12]
results.222 <- lapply(1:nrow(param_df_invasion), function(i) {
# Combine individual and fixed parameters
params <- c(as.list(param_df_invasion[i, ]), fixed_params)
# Run the manual simulation
sim_df <- simulate_chemostat_manual_N1N2(
params = params,
state = state_chemo_222,
times = times_chemo,
mode = "substitu"  # or "essen"
)
sim_df$param_set <- i  # Track parameter set
sim_df
})
# Combine all results into one data frame
all_results_df.222 <- do.call(rbind, results.222)
all_results_df.222.equili = all_results_df.222[all_results_df.222$time==1000.0,]
all_results.equili = cbind(all_results_df.111.equili[,2:6],all_results_df.222.equili[2:5])
names(all_results.equili) = c("R1_2","R2_2",'N1_2','N2_2',"para_set","R1_1","R2_1",'N1_1','N2_1')
df_all_results.equili <- all_results.equili %>%
mutate(diff_N1 = abs(N1_2 - N1_1),
diff_N2 = abs(N2_2 - N2_1))            %>%
mutate(
diff_N1_per = ifelse(diff_N1 != 0, abs(N1_2 - N1_1) / (N1_2 + N1_1), 0),
diff_N2_per = ifelse(diff_N2 != 0, abs(N2_2 - N2_1) / (N2_2 + N2_1), 0)
) %>%
mutate(
results_1 = case_when(
(N1_1 > 100*N2_1)  ~ 'N1 outcompete',
(N2_1 > 100*N1_1)  ~ 'N2 outcompete',
TRUE ~ 'coexsitence'),
results_2 = case_when(
(N1_2 > 100*N2_2)  ~ 'N1 outcompete',
(N2_2 > 100*N1_2)  ~ 'N2 outcompete',
TRUE ~ 'coexsitence'
)
)
df_all_results.equili_new = df_all_results.equili[,c("para_set","N1_1","N1_2","diff_N1","diff_N1_per","N2_1","N2_2","diff_N2","diff_N2_per",'results_1','results_2')]
df_all_results.equili_new %>%
group_by(results_1, results_2) %>%
summarise(count = n(), .groups = 'drop')
filtered_row_names <- df_all_results.equili_new %>%
# filter(results_1=='N1 outcompete',results_2=='coexsitence',N2_2>5) %>%
filter(results_2=='N2 outcompete',results_1=='coexsitence',N1_1>5) %>%
pull(para_set)
filtered_row_names <- df_all_results.equili_new %>%
filter(results_1=='N1 outcompete',results_2=='coexsitence',N2_2>5) %>%
#  filter(results_2=='N2 outcompete',results_1=='coexsitence',N1_1>5) %>%
pull(para_set)
